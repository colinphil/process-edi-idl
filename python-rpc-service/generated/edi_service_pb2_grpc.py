# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import edi_service_pb2 as edi__service__pb2

GRPC_GENERATED_VERSION = '1.75.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in edi_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class EdiServiceStub(object):
    """*
    Generic EDI Processing Service
    This service provides a unified API for processing multiple EDI message types.

    It supports:
    - Multiple EDI Types: 
    - 850 (Purchase Order)
    - 810 (Invoice)
    - 856 (Advance Ship Notice)
    - 997 (Functional Acknowledgment)
    - and more
    - Unified API: Single service interface for all EDI message types
    - Extensible Design: Easy to add new EDI message types
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessEdiMessage = channel.unary_unary(
                '/edi.EdiService/ProcessEdiMessage',
                request_serializer=edi__service__pb2.ProcessEdiMessageRequest.SerializeToString,
                response_deserializer=edi__service__pb2.ProcessEdiMessageResponse.FromString,
                _registered_method=True)
        self.GetSupportedMessageTypes = channel.unary_unary(
                '/edi.EdiService/GetSupportedMessageTypes',
                request_serializer=edi__service__pb2.GetSupportedMessageTypesRequest.SerializeToString,
                response_deserializer=edi__service__pb2.GetSupportedMessageTypesResponse.FromString,
                _registered_method=True)
        self.ValidateEdiMessage = channel.unary_unary(
                '/edi.EdiService/ValidateEdiMessage',
                request_serializer=edi__service__pb2.ValidateEdiMessageRequest.SerializeToString,
                response_deserializer=edi__service__pb2.ValidateEdiMessageResponse.FromString,
                _registered_method=True)


class EdiServiceServicer(object):
    """*
    Generic EDI Processing Service
    This service provides a unified API for processing multiple EDI message types.

    It supports:
    - Multiple EDI Types: 
    - 850 (Purchase Order)
    - 810 (Invoice)
    - 856 (Advance Ship Notice)
    - 997 (Functional Acknowledgment)
    - and more
    - Unified API: Single service interface for all EDI message types
    - Extensible Design: Easy to add new EDI message types
    """

    def ProcessEdiMessage(self, request, context):
        """Process any EDI message type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSupportedMessageTypes(self, request, context):
        """Get supported EDI message types
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateEdiMessage(self, request, context):
        """Validate EDI message format without processing
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EdiServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessEdiMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessEdiMessage,
                    request_deserializer=edi__service__pb2.ProcessEdiMessageRequest.FromString,
                    response_serializer=edi__service__pb2.ProcessEdiMessageResponse.SerializeToString,
            ),
            'GetSupportedMessageTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSupportedMessageTypes,
                    request_deserializer=edi__service__pb2.GetSupportedMessageTypesRequest.FromString,
                    response_serializer=edi__service__pb2.GetSupportedMessageTypesResponse.SerializeToString,
            ),
            'ValidateEdiMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateEdiMessage,
                    request_deserializer=edi__service__pb2.ValidateEdiMessageRequest.FromString,
                    response_serializer=edi__service__pb2.ValidateEdiMessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'edi.EdiService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('edi.EdiService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class EdiService(object):
    """*
    Generic EDI Processing Service
    This service provides a unified API for processing multiple EDI message types.

    It supports:
    - Multiple EDI Types: 
    - 850 (Purchase Order)
    - 810 (Invoice)
    - 856 (Advance Ship Notice)
    - 997 (Functional Acknowledgment)
    - and more
    - Unified API: Single service interface for all EDI message types
    - Extensible Design: Easy to add new EDI message types
    """

    @staticmethod
    def ProcessEdiMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edi.EdiService/ProcessEdiMessage',
            edi__service__pb2.ProcessEdiMessageRequest.SerializeToString,
            edi__service__pb2.ProcessEdiMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSupportedMessageTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edi.EdiService/GetSupportedMessageTypes',
            edi__service__pb2.GetSupportedMessageTypesRequest.SerializeToString,
            edi__service__pb2.GetSupportedMessageTypesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateEdiMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/edi.EdiService/ValidateEdiMessage',
            edi__service__pb2.ValidateEdiMessageRequest.SerializeToString,
            edi__service__pb2.ValidateEdiMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
